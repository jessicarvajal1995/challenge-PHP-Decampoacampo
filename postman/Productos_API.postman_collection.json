{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789abc",
		"name": "Productos API - Challenge PHP",
		"description": "Colección completa para probar la API REST de gestión de productos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"API is working\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.status).to.eql('OK');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Endpoint para verificar que la API esté funcionando correctamente."
			},
			"response": []
		},
		{
			"name": "Obtener todos los productos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has success and data fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Products have required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.data.length > 0) {",
							"        var product = jsonData.data[0];",
							"        pm.expect(product).to.have.property('id');",
							"        pm.expect(product).to.have.property('nombre');",
							"        pm.expect(product).to.have.property('descripcion');",
							"        pm.expect(product).to.have.property('precio');",
							"        pm.expect(product).to.have.property('precio_usd');",
							"        pm.expect(product).to.have.property('created_at');",
							"        pm.expect(product).to.have.property('updated_at');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/productos",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"productos"
					]
				},
				"description": "Obtiene la lista completa de productos con precios en ARS y USD."
			},
			"response": []
		},
		{
			"name": "Obtener producto por ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Product has all required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data).to.have.property('nombre');",
							"    pm.expect(jsonData.data).to.have.property('descripcion');",
							"    pm.expect(jsonData.data).to.have.property('precio');",
							"    pm.expect(jsonData.data).to.have.property('precio_usd');",
							"});",
							"",
							"pm.test(\"Price conversion is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    var precioArs = parseFloat(jsonData.data.precio);",
							"    var precioUsd = parseFloat(jsonData.data.precio_usd);",
							"    var expectedUsd = precioArs / 1000; // Asumiendo PRECIO_USD=1000",
							"    pm.expect(precioUsd).to.be.closeTo(expectedUsd, 0.01);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/productos/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"productos",
						"1"
					]
				},
				"description": "Obtiene un producto específico por su ID."
			},
			"response": []
		},
		{
			"name": "Crear nuevo producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Product created successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.message).to.include('creado');",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"});",
							"",
							"pm.test(\"Created product has correct data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.nombre).to.eql('Smartphone Samsung Galaxy');",
							"    pm.expect(jsonData.data.precio).to.eql(850000);",
							"    pm.expect(jsonData.data.precio_usd).to.eql(850);",
							"});",
							"",
							"// Guardar ID del producto creado para usar en otros tests",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"    pm.collectionVariables.set('created_product_id', jsonData.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Smartphone Samsung Galaxy\",\n    \"descripcion\": \"Smartphone Android con pantalla AMOLED de 6.1 pulgadas, 128GB almacenamiento, cámara triple de 50MP\",\n    \"precio\": 850000.00\n}"
				},
				"url": {
					"raw": "{{base_url}}/productos",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"productos"
					]
				},
				"description": "Crea un nuevo producto en el catálogo."
			},
			"response": []
		},
		{
			"name": "Actualizar producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Product updated successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.message).to.include('actualizado');",
							"});",
							"",
							"pm.test(\"Updated product has new data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.nombre).to.include('Actualizado');",
							"    pm.expect(jsonData.data.precio).to.eql(950000);",
							"    pm.expect(jsonData.data.precio_usd).to.eql(950);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Smartphone Samsung Galaxy - Actualizado\",\n    \"descripcion\": \"Smartphone Android con pantalla AMOLED de 6.1 pulgadas, 256GB almacenamiento, cámara triple de 50MP con zoom óptico\",\n    \"precio\": 950000.00\n}"
				},
				"url": {
					"raw": "{{base_url}}/productos/{{created_product_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"productos",
						"{{created_product_id}}"
					]
				},
				"description": "Actualiza un producto existente. Usa el ID del producto creado anteriormente."
			},
			"response": []
		},
		{
			"name": "Eliminar producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Product deleted successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.message).to.include('eliminado');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/productos/{{created_product_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"productos",
						"{{created_product_id}}"
					]
				},
				"description": "Elimina un producto del catálogo. Usa el ID del producto creado anteriormente."
			},
			"response": []
		},
		{
			"name": "Obtener producto inexistente (Error 404)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Error response format\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.message).to.include('no encontrado');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/productos/99999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"productos",
						"99999"
					]
				},
				"description": "Prueba el manejo de errores cuando se solicita un producto que no existe."
			},
			"response": []
		},
		{
			"name": "Crear producto con datos inválidos (Error 400)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Validation error response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.message).to.include('inválidos');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"\",\n    \"descripcion\": \"\",\n    \"precio\": -100\n}"
				},
				"url": {
					"raw": "{{base_url}}/productos",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"productos"
					]
				},
				"description": "Prueba la validación de datos enviando un producto con campos inválidos."
			},
			"response": []
		},
		{
			"name": "Test de Inyección SQL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"SQL injection attempt handled safely\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    // El texto malicioso se guardó como texto normal, no como SQL",
							"    pm.expect(jsonData.data.nombre).to.include('DROP TABLE');",
							"});",
							"",
							"pm.test(\"Malicious code stored as text\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.nombre).to.eql('Test\\'; DROP TABLE productos; --');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Test'; DROP TABLE productos; --\",\n    \"descripcion\": \"Intento de inyección SQL que debería ser neutralizado por prepared statements\",\n    \"precio\": 1000.00\n}"
				},
				"url": {
					"raw": "{{base_url}}/productos",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"productos"
					]
				},
				"description": "Demuestra que la API está protegida contra inyección SQL. El código malicioso se almacena como texto normal."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script global que se ejecuta antes de cada request",
					"console.log('Ejecutando request a: ' + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script global que se ejecuta después de cada request",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"pm.test(\"Content-Type is JSON\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});",
					"",
					"pm.test(\"CORS headers present\", function () {",
					"    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.eql('*');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "created_product_id",
			"value": "",
			"type": "string"
		}
	]
} 